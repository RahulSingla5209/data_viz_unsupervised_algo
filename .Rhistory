parameter=list(support=.005, confidence=.1, maxlen=5))
inspect(subset(grocery_rules, subset=lift > 4))
rm(list = ls())
library(arules)
library(arulesViz)
groceries = read.transactions('groceries.txt', sep = ',',
rm.duplicates = T, header = F,
format = 'basket')
summary(groceries)
grocery_rules = apriori(groceries,
parameter=list(support=.005, confidence=.1, maxlen=5))
inspect(subset(grocery_rules, subset=lift > 4))
grocery_rules = apriori(groceries,
parameter=list(support=.005, confidence=.1, maxlen=5))
inspect(subset(grocery_rules, subset=lift > 4))
plot(grocery_rules, measure = c("support", "confidence"), shading = 'lift')
saveAsGraph(head(grocery_rules, n = 1000, by = "lift"), file = "musicrules.graphml")
grocery_rules = apriori(groceries,
parameter=list(support=.005, confidence=.1, maxlen=5))
inspect(subset(grocery_rules, subset=lift > 4))
inspect(subset(musicrules, subset=confidence > 0.6))
inspect(subset(grocery_rules, subset=confidence > 0.6))
detach(package:tm, unload=TRUE)
detach(package:tm, unload=TRUE)
inspect(subset(grocery_rules, subset=confidence > 0.6))
detach(package:tm, unload=TRUE)
detach(name = package:tm, unload=TRUE)
detach(name = tm, unload=TRUE)
detach(name = 'tm', unload=TRUE)
arules::inspect(subset(grocery_rules, subset=confidence > 0.6))
grocery_rules = apriori(groceries,
parameter=list(support=.005, confidence=.1, maxlen=5))
arules::inspect(subset(grocery_rules, subset=confidence > 0.6))
saveAsGraph(head(subset(grocery_rules, subset=confidence > 0.6), n = 1000, by = "lift"), file = "grocery.graphml")
arules::inspect(subset(grocery_rules, subset=lift > 3.5))
grocery_rules = apriori(groceries,
parameter=list(support=.005, confidence=.1, maxlen=5))
arules::inspect(subset(grocery_rules, subset=lift > 3.2))
grocery_rules = apriori(groceries,
parameter=list(support=.005, confidence=.1, maxlen=5))
arules::inspect(subset(grocery_rules, subset=lift > 3.2))
saveAsGraph(head(subset(grocery_rules, subset=lift > 3.2), n = 1000, by = "lift"), file = "grocery.graphml")
setwd("C:/Studies/Intro to ML/second half/R")
rm(list = ls())
library(tidyverse)
library(arules)  # has a big ecosystem of packages built around it
library(arulesViz)
# Association rule mining
# Adapted from code by Matt Taddy
# Read in playlists from users
# This is in "long" format -- every row is a single artist-listener pair
playlists_raw = read.csv("../data/playlists.csv")
str(playlists_raw)
summary(playlists_raw)
# Barplot of top 20 artists
# Cool use of magrittr pipes in plotting/summary workflow
# the dot (.) means "plug in the argument coming from the left"
playlists_raw$artist %>%
summary(., maxsum=Inf) %>%
sort(., decreasing=TRUE) %>%
head(., 20) %>%
barplot(., las=2, cex.names=0.6)
# Turn user into a factor
playlists_raw$user = factor(playlists_raw$user)
# First create a list of baskets: vectors of items by consumer
# Analagous to bags of words
# apriori algorithm expects a list of baskets in a special format
# In this case, one "basket" of songs per user
# First split data into a list of artists for each user
playlists = split(x=playlists_raw$artist, f=playlists_raw$user)
## Remove duplicates ("de-dupe")
playlists = lapply(playlists, unique)
## Cast this variable as a special arules "transactions" class.
playtrans = as(playlists, "transactions")
summary(playtrans)
# Now run the 'apriori' algorithm
# Look at rules with support > .005 & confidence >.1 & length (# artists) <= 5
musicrules = apriori(playtrans,
parameter=list(support=.005, confidence=.1, maxlen=5))
# Look at the output... so many rules!
inspect(musicrules)
## Choose a subset
inspect(subset(musicrules, subset=lift > 5))
inspect(subset(musicrules, subset=confidence > 0.6))
inspect(subset(musicrules, subset=lift > 10 & confidence > 0.5))
# plot all the rules in (support, confidence) space
# notice that high lift rules tend to have low support
plot(musicrules)
# can swap the axes and color scales
plot(musicrules, measure = c("support", "lift"), shading = "confidence")
# "two key" plot: coloring is by size (order) of item set
plot(musicrules, method='two-key plot')
# can now look at subsets driven by the plot
inspect(subset(musicrules, support > 0.035))
inspect(subset(musicrules, confidence > 0.7))
inspect(subset(musicrules, confidence > 0.7))
arules::inspect(subset(musicrules, confidence > 0.7))
x = arules::inspect(subset(grocery_rules, subset=lift > 3.2))
setwd("C:/Studies/Intro to ML/group assignment 2")
rm(list = ls())
library(arules)
library(arulesViz)
groceries = read.transactions('groceries.txt', sep = ',',
rm.duplicates = T, header = F,
format = 'basket')
summary(groceries)
grocery_rules = apriori(groceries,
parameter=list(support=.005, confidence=.1, maxlen=5))
x = arules::inspect(subset(grocery_rules, subset=lift > 3.2))
View(x)
View(x)
saveAsGraph(head(grocery_rules, n = 1000, by = "lift"), file = "grocery.graphml")
summary(grocery_rules)
inspect(grocery_rules)
arules::inspect(grocery_rules)
arules::inspect(subset(grocery_rules, subset=lift > 3.2 & support < 0.1)
grocery_rules = apriori(groceries,
setwd("C:/Studies/Intro to ML/group assignment 2")
rm(list = ls())
library(arules)
library(arulesViz)
groceries = read.transactions('groceries.txt', sep = ',',
rm.duplicates = T, header = F,
format = 'basket')
summary(groceries)
grocery_rules = apriori(groceries,
parameter=list(support=.005, confidence=.1, maxlen=5))
arules::inspect(subset(grocery_rules, subset=lift > 3.2 & support < 0.1))
saveAsGraph(head(subset(grocery_rules, subset=support < 0.1), n = 1000, by = "lift"), file = "grocery.graphml")
x = arules::inspect(subset(grocery_rules, subset=lift > 3.2 & support < 0.1))
View(x)
summary(grocery_rules)
arules::inspect(grocery_rules)
saveAsGraph(head(subset(grocery_rules, subset=lift > 2 & support < 0.1), n = 1000, by = "lift"), file = "grocery.graphml")
summary(grocery_rules)
saveAsGraph(head(subset(grocery_rules, subset=lift > 2 & support < 0.1), n = 1000, by = "lift"), file = "grocery.graphml")
![Association ](gephi.png)
!(gephi.png)
setwd("C:/Studies/Intro to ML/group assignment 2")
saveAsGraph(head(subset(grocery_rules, subset=lift > 2 & support < 0.1), n = 1000, by = "lift"), file = "grocery.graphml")
!(gephi.png)
saveAsGraph(head(subset(grocery_rules, subset=lift > 2 & support < 0.1), n = 1000, by = "lift"), file = "grocery.graphml")
!(C:/Studies/Intro to ML/group assignment 2/gephi.png)
saveAsGraph(head(subset(grocery_rules, subset=lift > 2 & support < 0.1), n = 1000, by = "lift"), file = "grocery.graphml")
!(/gephi.png)
![unchanged image](gephi.PNG)
quantile(wealth_gain, prob=0.05)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(DescTools)
library(tidyverse)
df = read.csv('greenbuildings.csv', header = T)
df$green_rating = as.factor(df$green_rating)
df$scaled_rent = df$Rent / df$cluster_rent
#scaled
difference_in_rents =
median(df[df$green_rating  == 1,]$scaled_rent) -
median(df[df$green_rating  == 0,]$scaled_rent)
additional_rent_pre_sqft = 25 * (difference_in_rents + 1) #assuming $25 to be base
area = 250000 #sqft
additional_pay_from_green = additional_rent_pre_sqft * area
#df %>% ggplot(aes(x = stories, y = Rent)) +
#  geom_point() +
#  geom_vline(xintercept = 15) +
#  stat_smooth(method = "lm", col = "red", formula = 'y ~ x') +
#  facet_wrap(vars(green_rating)) + xlim(0, 60)
#
#df %>% ggplot(aes(x = size, y = Rent, color = class_a)) +
#  geom_point() +
#  geom_vline(xintercept = 250000) +
#  stat_smooth(method = "lm", col = "red", formula = 'y ~ x') +
#  facet_wrap(vars(green_rating)) + scale_x_log10() + ylim(0, 100)
df$class_a = as.factor(df$class_a)
df %>% ggplot(aes(x = Rent, color = green_rating)) +
geom_histogram() +  facet_wrap(vars(class_a), nrow = 2) +
xlim(0, 100) +
labs(title = "Facet wrap - Class A")
df %>% ggplot(aes(x = Rent, color = green_rating)) +
geom_histogram() +
facet_wrap(vars(amenities), nrow = 2) +
xlim(0, 100) +
labs(title = "Facet wrap - Amenties")
df1 = df[df$class_a == 1,]
additional_rent_pre_sqft = median(df1[df1$green_rating  == 1,]$Rent) - median(df1[df1$green_rating  == 0,]$Rent)
area = 250000 #sqft
additional_pay_from_green = additional_rent_pre_sqft * area
df2 = df[df$amenities == 1,]
additional_rent_pre_sqft = median(df2[df2$green_rating  == 1,]$Rent) - median(df2[df2$green_rating  == 0,]$Rent)
area = 250000 #sqft
additional_pay_from_green = additional_rent_pre_sqft * area
df3 = df[df$amenities == 1 & df$class_a == 1,]
additional_rent_pre_sqft = median(df3[df3$green_rating  == 1,]$Rent) - median(df3[df3$green_rating  == 0,]$Rent)
area = 250000 #sqft
additional_pay_from_green = additional_rent_pre_sqft * area
rm(list = ls())
df = data.table::fread('ABIA.csv')
df = df[df$Cancelled == 0,]
df[is.na(df)] <- 0
df$unavoidable_delays = df$WeatherDelay + df$NASDelay + df$SecurityDelay
df$unavoidable_delays_perc = abs(df$unavoidable_delays / df$DepDelay) > 0
df[is.na(df)] <- 0
df%>%ggplot() +
geom_point(aes(x=ArrDelay, y = DepDelay,
shape = as.factor(unavoidable_delays_perc),
color = as.factor(unavoidable_delays_perc)),
size=1.5,
alpha = 0.3) +
facet_wrap(vars(Month)) +
labs(title = "Arrival Delay vs Dept Delay by months",
x = "Arrival Delay",
y = "Departure Delay",
color = "Delay caused due to \n Airport Authorities",
shape = "Delay caused due to \n Airport Authorities"
)
df1 <-  df %>%
group_by(Month) %>%
summarise("average_dep_delay" = mean(DepDelay),
"average_unavoidable_delays" = mean(unavoidable_delays, na.rm = T),
"percentage" = average_unavoidable_delays / average_dep_delay) %>% ungroup()
df1 %>%
ggplot(aes(y=average_dep_delay,
x = Month,
fill = average_unavoidable_delays)) +
geom_bar(position="stack", stat="identity")
holding = 100000 #100 Grand
n_days = 20
protfolio1 = c(0.25, 0.25, 0.25, 0.25)
n_simulations = 30000
wealth_tracker = rep(0, n_days)
all_simulation = NULL
for (simulation in 1:n_simulations)
{
current_holding = holding
wealth_tracker = rep(0, n_days)
for (i in 1: n_days)
{
holdings = current_holding * protfolio1
r = resample(all_returns, size = 1)
total_holding = sum((1 + r) * holdings)
wealth_tracker[i] = total_holding
current_holding = total_holding
}
all_simulation = rbind(all_simulation, wealth_tracker)
}
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(DescTools)
library(tidyverse)
df = read.csv('greenbuildings.csv', header = T)
df$green_rating = as.factor(df$green_rating)
df$scaled_rent = df$Rent / df$cluster_rent
#scaled
difference_in_rents =
median(df[df$green_rating  == 1,]$scaled_rent) -
median(df[df$green_rating  == 0,]$scaled_rent)
additional_rent_pre_sqft = 25 * (difference_in_rents + 1) #assuming $25 to be base
area = 250000 #sqft
additional_pay_from_green = additional_rent_pre_sqft * area
#df %>% ggplot(aes(x = stories, y = Rent)) +
#  geom_point() +
#  geom_vline(xintercept = 15) +
#  stat_smooth(method = "lm", col = "red", formula = 'y ~ x') +
#  facet_wrap(vars(green_rating)) + xlim(0, 60)
#
#df %>% ggplot(aes(x = size, y = Rent, color = class_a)) +
#  geom_point() +
#  geom_vline(xintercept = 250000) +
#  stat_smooth(method = "lm", col = "red", formula = 'y ~ x') +
#  facet_wrap(vars(green_rating)) + scale_x_log10() + ylim(0, 100)
df$class_a = as.factor(df$class_a)
df %>% ggplot(aes(x = Rent, color = green_rating)) +
geom_histogram() +  facet_wrap(vars(class_a), nrow = 2) +
xlim(0, 100) +
labs(title = "Facet wrap - Class A")
df %>% ggplot(aes(x = Rent, color = green_rating)) +
geom_histogram() +
facet_wrap(vars(amenities), nrow = 2) +
xlim(0, 100) +
labs(title = "Facet wrap - Amenties")
df1 = df[df$class_a == 1,]
additional_rent_pre_sqft = median(df1[df1$green_rating  == 1,]$Rent) - median(df1[df1$green_rating  == 0,]$Rent)
area = 250000 #sqft
additional_pay_from_green = additional_rent_pre_sqft * area
df2 = df[df$amenities == 1,]
additional_rent_pre_sqft = median(df2[df2$green_rating  == 1,]$Rent) - median(df2[df2$green_rating  == 0,]$Rent)
area = 250000 #sqft
additional_pay_from_green = additional_rent_pre_sqft * area
df3 = df[df$amenities == 1 & df$class_a == 1,]
additional_rent_pre_sqft = median(df3[df3$green_rating  == 1,]$Rent) - median(df3[df3$green_rating  == 0,]$Rent)
area = 250000 #sqft
additional_pay_from_green = additional_rent_pre_sqft * area
rm(list = ls())
df = data.table::fread('ABIA.csv')
df = df[df$Cancelled == 0,]
df[is.na(df)] <- 0
df$unavoidable_delays = df$WeatherDelay + df$NASDelay + df$SecurityDelay
df$unavoidable_delays_perc = abs(df$unavoidable_delays / df$DepDelay) > 0
df[is.na(df)] <- 0
df%>%ggplot() +
geom_point(aes(x=ArrDelay, y = DepDelay,
shape = as.factor(unavoidable_delays_perc),
color = as.factor(unavoidable_delays_perc)),
size=1.5,
alpha = 0.3) +
facet_wrap(vars(Month)) +
labs(title = "Arrival Delay vs Dept Delay by months",
x = "Arrival Delay",
y = "Departure Delay",
color = "Delay caused due to \n Airport Authorities",
shape = "Delay caused due to \n Airport Authorities"
)
df1 <-  df %>%
group_by(Month) %>%
summarise("average_dep_delay" = mean(DepDelay),
"average_unavoidable_delays" = mean(unavoidable_delays, na.rm = T),
"percentage" = average_unavoidable_delays / average_dep_delay) %>% ungroup()
df1 %>%
ggplot(aes(y=average_dep_delay,
x = Month,
fill = average_unavoidable_delays)) +
geom_bar(position="stack", stat="identity")
holding = 100000 #100 Grand
n_days = 20
protfolio1 = c(0.25, 0.25, 0.25, 0.25)
n_simulations = 30000
wealth_tracker = rep(0, n_days)
all_simulation = NULL
for (simulation in 1:n_simulations)
{
current_holding = holding
wealth_tracker = rep(0, n_days)
for (i in 1: n_days)
{
holdings = current_holding * protfolio1
r = resample(all_returns, size = 1)
total_holding = sum((1 + r) * holdings)
wealth_tracker[i] = total_holding
current_holding = total_holding
}
all_simulation = rbind(all_simulation, wealth_tracker)
}
rm(list = ls())
library(quantmod)
library(mosaic)
#stocks chosen -
# Low Risk - Apple, Google, Texas Instruments
# Medium Risk - Tesla
mystocks = c("AAPL",  "GOOGL", "TXN", "TSLA")
getSymbols(mystocks, from = "2016-01-01")
#adjust for stock splits and dividends
apple = adjustOHLC(AAPL)
google = adjustOHLC(GOOGL)
ti = adjustOHLC(TXN)
tesla = adjustOHLC(TSLA)
df = cbind(ClCl(apple), ClCl(google), ClCl(ti),
ClCl(tesla))
all_returns = as.matrix(na.omit(df))
holding = 100000 #100 Grand
n_days = 20
protfolio1 = c(0.25, 0.25, 0.25, 0.25)
n_simulations = 30000
wealth_tracker = rep(0, n_days)
all_simulation = NULL
for (simulation in 1:n_simulations)
{
current_holding = holding
wealth_tracker = rep(0, n_days)
for (i in 1: n_days)
{
holdings = current_holding * protfolio1
r = resample(all_returns, size = 1)
total_holding = sum((1 + r) * holdings)
wealth_tracker[i] = total_holding
current_holding = total_holding
}
all_simulation = rbind(all_simulation, wealth_tracker)
}
wealth_gain = all_simulation[, 20] - holding
hist(wealth_gain, breaks = 1000, xlim = c(-40000, 40000),
main = "Gain for Portofolio 1")
abline(v = quantile(wealth_gain, prob=0.05), col = 'red')
quantile(wealth_gain, prob=0.05)
holding = 100000 #100 Grand
n_days = 20
protfolio1 = c(0.2, 0.15, 0.15, 0.5)
n_simulations = 30000
wealth_tracker = rep(0, n_days)
all_simulation = NULL
for (simulation in 1:n_simulations)
{
current_holding = holding
wealth_tracker = rep(0, n_days)
for (i in 1: n_days)
{
holdings = current_holding * protfolio1
r = resample(all_returns, size = 1)
total_holding = sum((1 + r) * holdings)
wealth_tracker[i] = total_holding
current_holding = total_holding
}
all_simulation = rbind(all_simulation, wealth_tracker)
}
wealth_gain = all_simulation[, 20] - holding
hist(wealth_gain, breaks = 1000, xlim = c(-40000, 40000),
main = "Gain for Portofolio 2")
abline(v = quantile(wealth_gain, prob=0.05), col = 'red')
holding = 100000 #100 Grand
n_days = 20
protfolio1 = c(0.2, 0.2, 0.5, 0.1)
n_simulations = 30000
wealth_tracker = rep(0, n_days)
all_simulation = NULL
for (simulation in 1:n_simulations)
{
current_holding = holding
wealth_tracker = rep(0, n_days)
for (i in 1: n_days)
{
holdings = current_holding * protfolio1
r = resample(all_returns, size = 1)
total_holding = sum((1 + r) * holdings)
wealth_tracker[i] = total_holding
current_holding = total_holding
}
all_simulation = rbind(all_simulation, wealth_tracker)
}
wealth_gain = all_simulation[, 20] - holding
hist(wealth_gain, breaks = 1000, xlim = c(-40000, 40000),
main = "Gain for Portofolio 3")
abline(v = quantile(wealth_gain, prob=0.05), col = 'red')
![](gephi.PNG)
knitr::include_graphics("gephi.png")
knitr::opts_chunk$set(echo = TRUE)
df1 <-  df %>%
group_by(Month) %>%
summarise("average_dep_delay" = mean(DepDelay),
"average_unavoidable_delays" = mean(unavoidable_delays, na.rm = T),
"percentage" = average_unavoidable_delays / average_dep_delay) %>% ungroup()
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(DescTools)
library(tidyverse)
df = read.csv('greenbuildings.csv', header = T)
df$green_rating = as.factor(df$green_rating)
df$scaled_rent = df$Rent / df$cluster_rent
#scaled
difference_in_rents =
median(df[df$green_rating  == 1,]$scaled_rent) -
median(df[df$green_rating  == 0,]$scaled_rent)
#df %>% ggplot(aes(x = stories, y = Rent)) +
#  geom_point() +
#  geom_vline(xintercept = 15) +
#  stat_smooth(method = "lm", col = "red", formula = 'y ~ x') +
#  facet_wrap(vars(green_rating)) + xlim(0, 60)
#
#df %>% ggplot(aes(x = size, y = Rent, color = class_a)) +
#  geom_point() +
#  geom_vline(xintercept = 250000) +
#  stat_smooth(method = "lm", col = "red", formula = 'y ~ x') +
#  facet_wrap(vars(green_rating)) + scale_x_log10() + ylim(0, 100)
df$class_a = as.factor(df$class_a)
df %>% ggplot(aes(x = Rent, color = green_rating)) +
geom_histogram() +  facet_wrap(vars(class_a), nrow = 2) +
xlim(0, 100) +
labs(title = "Facet wrap - Class A")
df %>% ggplot(aes(x = Rent, color = green_rating)) +
geom_histogram() +
facet_wrap(vars(amenities), nrow = 2) +
xlim(0, 100) +
labs(title = "Facet wrap - Amenties")
df1 = df[df$class_a == 1,]
additional_rent_pre_sqft = median(df1[df1$green_rating  == 1,]$Rent) - median(df1[df1$green_rating  == 0,]$Rent)
area = 250000 #sqft
additional_pay_from_green = additional_rent_pre_sqft * area
df2 = df[df$amenities == 1,]
additional_rent_pre_sqft = median(df2[df2$green_rating  == 1,]$Rent) - median(df2[df2$green_rating  == 0,]$Rent)
area = 250000 #sqft
additional_pay_from_green = additional_rent_pre_sqft * area
df3 = df[df$amenities == 1 & df$class_a == 1,]
additional_rent_pre_sqft = median(df3[df3$green_rating  == 1,]$Rent) - median(df3[df3$green_rating  == 0,]$Rent)
area = 250000 #sqft
additional_pay_from_green = additional_rent_pre_sqft * area
rm(list = ls())
df = data.table::fread('ABIA.csv')
df = df[df$Cancelled == 0,]
df[is.na(df)] <- 0
df$unavoidable_delays = df$WeatherDelay + df$NASDelay + df$SecurityDelay
df$unavoidable_delays_perc = abs(df$unavoidable_delays / df$DepDelay) > 0
df[is.na(df)] <- 0
df%>%ggplot() +
geom_point(aes(x=ArrDelay, y = DepDelay,
shape = as.factor(unavoidable_delays_perc),
color = as.factor(unavoidable_delays_perc)),
size=1.5,
alpha = 0.3) +
facet_wrap(vars(Month)) +
labs(title = "Arrival Delay vs Dept Delay by months",
x = "Arrival Delay",
y = "Departure Delay",
color = "Delay caused due to \n Airport Authorities",
shape = "Delay caused due to \n Airport Authorities"
)
df1 <-  df %>%
group_by(Month) %>%
summarise("average_dep_delay" = mean(DepDelay),
"average_unavoidable_delays" = mean(unavoidable_delays, na.rm = T),
"percentage" = average_unavoidable_delays / average_dep_delay) %>% ungroup()
df1 %>%
ggplot(aes(y=average_dep_delay,
x = Month,
fill = average_unavoidable_delays)) +
geom_bar(position="stack", stat="identity")
